name: deploy-nest-starter-project

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag (e.g., v1.0.0) to deploy'
        required: true
        type: string
        default: 'vx.x.x'
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'ec2_prod_server'
        type: choice
        options:
          - ec2_prod_server
          - uat
      release_notes:
        description: 'Release notes'
        required: true
        type: string
      version_to_rollback:
        description: 'Version to rollback to (leave empty for new deployment)'
        required: false
        type: string
        default: ''
env:
  IMAGE_NAME: ${{ vars.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}
jobs:
  build-and-push-docker-image:
    runs-on: ubuntu-latest
    environment: ec2_prod_server
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          logout: true
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest

  create-release:
    needs: build-and-push-docker-image
    if: inputs.version_to_rollback == '' # Only create release for new deployments
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for creating releases
    steps:
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag_name }}
          name: Release ${{ inputs.tag_name }}
          body: |
            ## Release Notes
            ${{ inputs.release_notes }}

            ## Deployment Information
            - Environment: ${{ inputs.environment }}
            - Docker Image: ${{ env.IMAGE_NAME }}:${{ inputs.tag_name }}
            - Deployment Date: ${{ now() }}
          draft: false
          prerelease: false

  deploy:
    runs-on: Linux
    needs: create-release
    environment: ec2_prod_server
    steps:
      - name: Stop and remove the running docker container
        run: docker stop ${{env.IMAGE_NAME}} && docker rm ${{env.IMAGE_NAME}} || true
      - name: Remove the old docker image
        run: docker rmi ${{env.IMAGE_NAME}}:latest || true
      - name: pull the latest image from DockerHUB
        run: docker pull ${{env.IMAGE_NAME}}:latest
      - name: run the latest project container
        run: docker run -d -p 3000:3000 --restart unless-stopped --name ${{ github.event.repository.name }} ${{env.IMAGE_NAME}}:latest
